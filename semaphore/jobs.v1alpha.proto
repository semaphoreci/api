syntax = "proto3";

package semaphore.jobs.v1alpha;

option go_package = "./jobs.v1alpha;semaphore_jobs_v1alpha";

service JobsApi {
  rpc ListJobs(ListJobsRequest) returns (ListJobsResponse);
  rpc GetJob(GetJobRequest) returns (Job);
  rpc GetJobDebugSSHKey(GetJobDebugSSHKeyRequest) returns (JobDebugSSHKey);
  rpc CreateJob(Job) returns (Job);
  rpc CreateDebugJob(CreateDebugJobRequest) returns (Job);
  rpc StopJob(StopJobRequest) returns (Empty);
}

message Job {
  message Metadata {
    string name = 1;
    string id = 2;

    int64 create_time = 3; // unix timestamp of job creation
    int64 update_time = 4; // unix timestamp of last update
    int64 start_time = 5; // unix timestamp of last update
    int64 finish_time = 6; // unix timestamp of last update
  }

  message Spec {
    message Agent {
      message Machine {
        string type = 1;
        string os_image = 2;
      }

      message Container {
        string name = 1;
        string image = 2;
        string command = 3;
        repeated EnvVar env_vars = 4;
        repeated Secret secrets = 5;
      }

      message ImagePullSecret {
        string name = 1;
      }

      Machine machine = 1;
      repeated Container containers = 2;
      repeated ImagePullSecret image_pull_secrets = 3;
    }

    message Secret {
      string name = 1;
    }

    message EnvVar {
      string name = 1;
      string value = 2;
    }

    message File {
      string path = 1;
      string content = 2;
    }

    string project_id = 1;
    Agent agent = 2;

    repeated Secret secrets = 3;
    repeated EnvVar env_vars = 4;
    repeated File files = 5;

    repeated string commands = 6;

    repeated string epilogue_commands = 7; // deprecated in favor of epilogue_always_commands
    repeated string epilogue_always_commands = 8;
    repeated string epilogue_on_pass_commands = 9;
    repeated string epilogue_on_fail_commands = 10;
  }

  message Status {
    enum Result {
      NONE = 0;    // Job has not yet finished.
      PASSED = 1;  // Succesfully finished job.
      FAILED = 2;  // Job has failed, either because a command has failed,
                   // or because dependancies are not available (i.e. secrets).
      STOPPED = 3; // Job was terminated before finishing.
    }

    enum State {
      PENDING = 0;  // Job is accepted by the Semaphore system.
      QUEUED = 1;   // Job is waiting for available capacity.
      RUNNING = 2;  // Job is processing commands.
      FINISHED = 3; // Job processing has finished, result has been calculated.
    }

    message Agent {
      message Port {
        string name = 1;
        int32 number = 2;
      }

      string ip = 1;
      repeated Port ports = 2;
      string name = 3;
    }

    Result result = 1;
    State state = 2;
    Agent agent = 3;
  }

  Metadata metadata = 1;
  Spec spec = 2;
  Status status = 3;
}

message ListJobsRequest {
  enum Order {
    BY_CREATE_TIME_DESC = 0;
  }

  int32 page_size = 1;
  string page_token = 2;
  Order order = 3;

  repeated Job.Status.State states = 4;
}

message ListJobsResponse {
  repeated Job jobs = 1;

  string next_page_token = 2;
}

message GetJobRequest {
  string job_id = 1;
}

message StopJobRequest {
  string job_id = 1;
}

message Empty {}

// Requests a Debug SSH key for the job with ID.
// The key is only available for RUNNING jobs.
// For PENDING, QUEUED and FINISHED a failed-precondition GRPC error will be returned.
message GetJobDebugSSHKeyRequest {
  string job_id = 1;
}

message JobDebugSSHKey {
  string key = 1;
}

message CreateDebugJobRequest {
  string job_id = 1;
  int32 duration = 2; // Duration of debug jobs in minutes, defaults to 60 minutes when set to 0.
}
