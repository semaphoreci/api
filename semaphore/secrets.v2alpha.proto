syntax = "proto3";

package semaphore.secrets.v2alpha;

option go_package = "./secrets.v2alpha;semaphore_secrets_v2alpha";

service SecretsApi {
  rpc ListSecrets(ListSecretsRequest) returns (ListSecretsResponse);
  rpc GetSecret(GetSecretRequest) returns (Secret);
  rpc CreateSecret(Secret) returns (Secret);
  rpc UpdateSecret(UpdateSecretRequest) returns (Secret);
  rpc DeleteSecret(DeleteSecretRequest) returns (Empty);
}

message Secret {
    enum SecretLevel {
        ORGANIZATION = 0;
        PROJECT = 1;
        DEPLOYMENT_TARGET = 2;
    }
  
    message Metadata {
      string name = 1;
      string id = 2;
      string org_id = 3;
      SecretLevel level = 4;
  
      string created_by = 5;
      string updated_by = 6;
      CheckoutMetadata last_checkout = 7;
      google.protobuf.Timestamp created_at = 8;
      google.protobuf.Timestamp updated_at = 9;
      google.protobuf.Timestamp checkout_at = 10;
    }
  
    message EnvVar {
      string name = 1;
      string value = 2;
    }
  
    message File {
      string path = 1;      // both absolute and relative paths are allowed
      string content = 2;   // base64 encoded content of the file
    }
  
    message Data {
      repeated EnvVar env_vars = 1;
      repeated File files = 2;
    }
  
    message OrgConfig {
      enum ProjectsAccess {
        ALL = 0;
        ALLOWED = 1;
        NONE = 2;
      }
      enum JobAttachAccess {
        JOB_ATTACH_YES = 0;
        JOB_ATTACH_NO = 2;
      }
      enum JobDebugAccess {
        JOB_DEBUG_YES = 0;
        JOB_DEBUG_NO = 2;
      }
  
      ProjectsAccess projects_access = 1;
      repeated string project_ids = 2;
  
      JobDebugAccess debug_access = 3;
      JobAttachAccess attach_access = 4;
    }
  
    message ProjectConfig {
      string project_id = 1;
    }
  
    Metadata metadata = 1;
    Data data = 2;
    OrgConfig org_config = 3;
    ProjectConfig project_config = 4;
}

message ListSecretsRequest {
    enum Order {
        BY_NAME_ASC = 0;
        BY_CREATE_TIME_ASC = 1;
    }

    int32 page_size = 1;
    string page_token = 2;
    Order order = 3;
}

message ListSecretsResponse {
    repeated Secret secrets = 1;

    string next_page_token = 2;
}

message GetSecretRequest {
    string secret_id_or_name = 1;
}

message UpdateSecretRequest {
    string secret_id_or_name = 1;

    Secret secret = 2;
}

message DeleteSecretRequest {
    string secret_id_or_name = 1;
}

message Empty {}
